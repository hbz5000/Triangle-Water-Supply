Borg Multiobjective Evolutionary Algorithm
==========================================
By David Hadka and Patrick Reed

--------------
 Introduction
--------------
The Borg Multiojective Evolutionary Algorithm (Borg MOEA) is a
state-of-the-art optimization algorithm developed by Dr. David Hadka and
Dr. Patrick Reed at the Pennsylvania State University.  This package
contains the C implementation of the Borg MOEA.  This algorithm is
described in detail in:

	Hadka, D., and Reed, P.M. "Borg: An Auto-Adaptive Many-Objective
	Evolutionary Computing Framework." Evolutionary Computation,
	21(2):231-259, 2012.

Please cite this reference in all academic papers and other publications
which use or are based on these codes.

------------------------------
 Copyright and License Notice
------------------------------
Copyright 2012-2013 The Pennsylvania State University

This software was written by David Hadka and others.

The use, modification and distribution of this software is governed by the
The Pennsylvania State University Research and Educational Use License.
You should have received a copy of this license along with this program.
If not, contact <dmh309@psu.edu>.

---------------
 Patent Notice
---------------
Patent protection for the Borg MOEA is being pursued by the Pennsylvania
State University including, but not limited to, United States patent 
application number 13/356,391 (pending).

--------------
 Dependencies
--------------
These codes use the Mersenne Twister pseudo-random number generator by
Takuji Nishimura and Makoto Matsumoto.  These codes are licensed under the
Modified BSD license.  See the copyright and license notices in mt19937ar.c
for details.

-----------
 Compiling
-----------
The Borg MOEA source code should compile with issue on any C compiler following
the C99 standard or any C++ compiler.  It has been tested successfully with
the GNU C Compiler (gcc), the GNU C++ Compiler (g++), the Intel C++ Compiler
(icc), and the Portland Group Inc. C++ Compiler (pgcc).  We strongly encourage
the use of the GNU C Compiler (gcc), and all examples are tailored for this
compiler.

Visual Studio C++ can be used to compile the Borg MOEA on Windows.  However,
since the Borg MOEA source code uses C99 standard declarations which are not
supported by Visual Studio's C89 compiler, you must force Visual Studio to use
its C++ compiler.  In the Visual Studio project properties, navigate to
"C/C++ > Advanced" and set "Compile As" to "Compile as C++ Code".

If GNU Make is available (and we strongly encourage its use), then all of the
examples can be compiled by running the command 'make'.  The make command reads
the contents of the file 'makefile'.  This file contains the instructions for
compiling the examples included in this package.  This is a good starting point
for learning how to compile the Borg MOEA.

------------------
 Serial Borg MOEA
------------------
This package contains the serial Borg MOEA, which is designed to run on a
single processor.  For this reason, the serial Borg MOEA is best suited for
running on personal computers and workstations.  Please refer to the following
paper for details of the algorithm.

	Hadka, D., and Reed, P. "Borg: An Auto-Adaptive Many-Objective
	Evolutionary Computing Framework." Evolutionary Computation,
	21(2):231-259, 2012.

The example 'dtlz2_serial.c' is provided to demonstrate the use of the serial
Borg MOEA to solve the popular DTLZ2 problem.  See the comments inside this
file to learn more about using the Borg MOEA.

If you have GNU Make installed on your computer, you can compile this example
by running the command 'make'.  If not, you can find the instructions for
compiling this example in the file 'makefile'.  Once compiled, run the
resulting executable.  After a few seconds of processing, the program will
output the Pareto optimal solutions for the DTLZ2 problem to the screen.

This example can be extended to integrate your own optimization problems and
solve them using the Borg MOEA.  Additional information for using the Borg
API is available in the file 'borg.h'.

------------------------
 Command Line Interface
------------------------
As demonstrated in the previous section, it is straightforward to compile a
problem directly in C/C++ to use with the Borg MOEA.  This is the most
efficient way to interface with the Borg MOEA.  However, in many situations,
the problem you are working with is not written in C/C++.  For these cases, we
provide a flexible alternative with borg.exe.

borg.exe is a command line tool that runs the serial Borg MOEA, except that
the optimization problem is defined elsewhere.  The problem can be defined in
a separate C/C++ executable, or can be written in Python, Java, Ruby, or any
other language of choice.

In the following example, we will use the Python implementation of the DTLZ2
problem in the file 'dtlz2.py'.  You can optimize this problem with the
following command:

	./borg.exe -n 10000 -v 11 -o 2 python dtlz2.py

Note how the three arguments specify the NFE (-n 10000), the number of
decision variables (-v 11), and the number of objectives (-o 2).  By default,
the lower and upper bounds of the decision variables are 0 and 1.  These bounds
can also be set with additional arguments -l and -u:

	./borg.exe -n 10000 -v 11 -o 2 -l 0,0,0,0,0,0,0,0,0,0
		-u 1,1,1,1,1,1,1,1,1,1,1 python dtlz2.py

To see all of the options made available by borg.exe, use the -h option:

	./borg.exe -h

At this point, we have demonstrated starting borg.exe to optimize a problem,
but we have not discussed how borg.exe communicates with the problem (i.e.,
how it passes decision variables and objective values back and forth).  The
simplest method available is to pass the values over the standard input and
standard output streams.  For example, when you run borg.exe and it needs
to evaluate a solution, it writes the decision variables to the standard
input of the problem.  The problem then reads these parameters from the
input, evaluates the problem, and writes the objectives and constraints (if
any) to its standard output where it is read by borg.exe.  Refer to the
Python example 'dtlz2.py' to see how this is implemented.

--------------------
 Parallel Borg MOEA
--------------------
This package also contains two high-performance parallel implementations
of the Borg MOEA.  The Master-Slave Borg MOEA uses the master-slave
paradigm to scale efficiently up to thousands of cores.  The Multi-Master
Borg MOEA introduces a novel parallelization strategy that runs efficiently
and robustly on hundreds of thousands of cores.  To date, it has been run
on 500,000 cores on the BlueWaters supercomputer with over 95% efficiency.
Both implementations are described in detail in:

	Hadka, D., and Reed, P. "Large-scale Parallelization of the Borg MOEA
	for Addressing the Design of Complex Engineered Systems."
	Evolutionary Computation, 2013 (In Review).

Two example C files are provided to demonstrate the use of the Master-Slave
and Multi-Master Borg MOEA.  The file 'dtlz2_ms.c' contains the Master-Slave
example and the file 'dtlz2_mm.c' contains the Multi-Master example.  Refer to
the comments inside these files to learn more about using each implementation.

As with the serial example, you can run the command 'make' to build these
examples.  Note that these examples require MPI.  Please contact the
administrator of your supercomputer or compute cluster if you have questions
about installing or using MPI.

Many supercomputers use a job queue, such as PBS, to manage the submission
and processing of jobs.  These systems will typically provide a command
called 'qsub' to submit new jobs.  Each job must provide a script that
defines the runtime, how many cores, etc. are required by the job and the
commands that are executed.  An example script for running the master-slave
example is provided below.  You may need to tailor this script for your
specific system.  Again, please contact your system administrator for details.

	#PBS -l nodes=16:ppn=4
	#PBS -l walltime=96:00:00
	#PBS -j oe
	#PBS -o output.txt
	cd $PBS_O_WORKDIR
	module load openmpi/gnu
	mpirun dtlz2_ms.exe

For example, if this script was saved to the file 'dtlz2_ms.pbs', you would
submit the job with the command 'qsub dtlz2_ms.pbs'.  The output is written
in the file 'output.txt'.

